.data
	# Constants
	PROMPT_HEIGHT: .asciiz "How tall shall I make the tower (max 12): "
	PROMPT_TOO_TALL: .asciiz "That's too tall"
	PROMPT_MOVE_FROM: .asciiz "Move from tower #: "
	PROMPT_MOVE_TO: .asciiz "Move to tower #: "
	PROMPT_WIN: .asciiz "Congratulations!"
	CHAR_BLOCK: .asciiz "X"
	CHAR_PAD: .asciiz " "
	CHAR_LF: .asciiz "\n"
	CHAR_LINE: .asciiz "-"
	WIDTH: .word 0
	HEIGHT: .word 0
	MAX_HEIGHT: .word 12
	
	# Globals
	HOLD: .word 0
	TOWER1: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	TOWER2: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	TOWER3: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

.text
	j main
	
	
	# function exit (status)
	# --------------------------------------------------
	# Exit the program
	exit:
		li $v0, 17
		syscall
		
	
	
	# function save (addr)
	# --------------------------------------------------
	# Push the $s registers to the stack and put `addr` in $s0
	# `addr` should be the old $ra so that you remember where to return
	# maintains $t registers and $v registers
	save:
		addi $sp, $sp, -32
		sw $s0, 0($sp)
		sw $s1, 4($sp)
		sw $s2, 8($sp)
		sw $s3, 12($sp)
		sw $s4, 16($sp)
		sw $s5, 20($sp)
		sw $s6, 24($sp)
		sw $s7, 28($sp)
		move $s0, $a0
		jr $ra
	
	
	# function return (addr)
	# --------------------------------------------------
	# Pop the $s registers from the stack and jump to `addr`
	# maintains $t registers and $v registers
	return:
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		lw $s5, 20($sp)
		lw $s6, 24($sp)
		lw $s7, 28($sp)
		addi $sp, $sp, 32
		jr $a0
	
	
	# function drawStr (str, count):
	# --------------------------------------------------
	# Draw a string `count` number of times
	drawStr:
		beq $a1, 0, drawStr_ret
		move $t0, $a1
		li $v0, 4
		syscall
		addi $a1, $t0, -1
		j drawStr
	drawStr_ret:
		jr $ra
	
	
	# function lf ():
	# --------------------------------------------------
	# Print a line feed
	lf:
		la $a0, CHAR_LF
		li $v0, 4
		syscall
		jr $ra
	
	
	# function drawPiece (level):
	# --------------------------------------------------
	# Print a hanoi piece
	# Params:
	#   - level: Which piece to draw. 1 is the smallest piece, 0 is no piece
	drawPiece:
		# get args
		move $t0, $a0
		
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		# $s1 is block width
		move $s1, $t0
		ble $s1, 0, drawPiece_blockWidth_0
		addi $s1, $s1, -1
		sll $s1, $s1, 1
		addi $s1, $s1, 1
		j drawPiece_blockWidth_done
		drawPiece_blockWidth_0:
			la $a0, CHAR_PAD
			li $a1, 1
			jal drawStr
		drawPiece_blockWidth_done:
		
		# s2 is padding width
		lw $s2, WIDTH
		sub $s2, $s2, $s1
		srl $s2, $s2, 1
		
		# draw
		la $a0, CHAR_PAD
		move $a1, $s2
		jal drawStr
		la $a0, CHAR_BLOCK
		move $a1, $s1
		jal drawStr
		la $a0, CHAR_PAD
		move $a1, $s2
		jal drawStr
		
		# return
		move $a0, $s0
		jal return
	
			
			
	# function drawLabels ():
	# --------------------------------------------------
	# Print the tower labels
	drawLabels:
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		# $s1 is number of towers
		li $s1, 3
		
		# $s2 is border width
		lw $s2, WIDTH
		mult $s1, $s2
		mflo $s2
		
		# $s3 is padding width
		lw $s3, WIDTH
		addi $s3, $s3, -1
		srl $s3, $s3, 1
		
		# $s4 is loop counter
		li $s4, 1
		
		# print border line
		la $a0, CHAR_LINE
		move $a1, $s2
		jal drawStr
		jal lf
		
		# draw labels
		drawLabels_loop:
			bgt $s4, $s1, drawLabels_loop_exit
			la $a0, CHAR_PAD
			move $a1, $s3
			jal drawStr
			move $a0, $s4
			li $v0, 1
			syscall
			la $a0, CHAR_PAD
			move $a1, $s3
			jal drawStr
			addi $s4, $s4, 1
			j drawLabels_loop
		drawLabels_loop_exit:
		
		jal lf
		
		# return
		move $a0, $s0
		jal return
		
		
	# function drawState ()
	# --------------------------------------------------
	# Prints the towers
	drawState:
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		# $s1 is height - 1
		lw $s1, HEIGHT
		addi $s1, $s1, -1
		
		drawState_loop:
			blt $s1, 0, drawState_loop_exit
			
			la $t0, TOWER1
			move $t1, $s1
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece
			
			la $t0, TOWER2
			move $t1, $s1
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece
			
			la $t0, TOWER3
			move $t1, $s1
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece
			
			jal lf
			addi $s1, $s1, -1
			j drawState_loop
		drawState_loop_exit:
		
		jal drawLabels
		
		# return
		move $a0, $s0
		jal return
		
		
	# function setup ()
	# --------------------------------------------------
	# Prompts the user for settings and sets up the game
	setup:
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		# get input
		setup_prompt:
			la $a0, PROMPT_HEIGHT
			li $a1, 1
			jal drawStr
			li $v0, 5
			syscall
			move $s1, $v0 # $s1 is input
			jal lf
		
			# validate input
			lw $t0, MAX_HEIGHT
			blt $s1, 0, setup_invalid
			ble $s1, $t0, setup_valid
			setup_invalid:
				la $a0, PROMPT_TOO_TALL
				li $a1, 1
				jal drawStr
				jal lf
				j setup_prompt
		setup_valid:
		
		# setup game height
		sw $s1, HEIGHT
		
		# setup game width
		sll $s1, $s1, 1
		addi $s1, $s1, 1
		sw $s1, WIDTH
		
		# build tower
		lw $t0, HEIGHT # level value
		la $t1, TOWER1 # address to put level value
		setup_loop:
			ble $t0, 0, setup_loop_exit
			sw $t0, 0($t1)
			addi $t0, $t0, -1
			addi $t1, $t1, 4
			j setup_loop
		setup_loop_exit:
		
		# return
		move $a0, $s0
		jal return
	
	
	# function play ()
	# --------------------------------------------------
	play:
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		play_entry:
		jal lf
		jal drawState
		
		# get "from" input, $s0 is "form" tower addr
		li $v0, 4
		la $a0, PROMPT_MOVE_FROM
		syscall
		li $v0, 5
		syscall
		la $s1, TOWER1
		beq $v0, 1, play_from_done
		la $s1, TOWER2
		beq $v0, 2, play_from_done
		la $s1, TOWER3
		play_from_done:
		
		# get "to" input, $s1 is "to" tower addr
		li $v0, 4
		la $a0, PROMPT_MOVE_TO
		syscall
		li $v0, 5
		syscall
		la $s2, TOWER1
		beq $v0, 1, play_to_done
		la $s2, TOWER2
		beq $v0, 2, play_to_done
		la $s2, TOWER3
		play_to_done:
		
		# validate input
		move $a0, $s1
		jal getTop
		move $s3, $v0 # $s3 is top of $s1
		move $a0, $s2
		jal getTop
		move $s4, $v0 # $s4 is top of $s2
		beq $s4, 0, play_valid
		blt $s3, $s4, play_valid
		jal play
		j play_exit
		play_valid:
		
		# move
		move $a0, $s1
		jal hold
		move $a0, $s2
		jal drop
		
		# check win
		lw $s5, TOWER1
		lw $s6, TOWER2
		beq $s5, $s6, play_exit # win!
		
		# loop
		j play
		
		play_exit:
			jal lf
			jal drawState
			la $a0, PROMPT_WIN
			li $a1, 1
			jal drawStr
			jal lf
			li $a0, 0
			jal exit
		
		
	
	# function hold (tower addr)
	# --------------------------------------------------
	# Take the top piece off the top of a tower and hold it
	hold:
		# get args
		move $t0, $a0
		
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		hold_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, hold_loop_exit
			move $t2, $t0
			addi $t0, $t0, 4
			j hold_loop
		hold_loop_exit:
			lw $t3, 0($t2)
			sw $t3, HOLD
			sw $zero, 0($t2)
		
		# return
		move $a0, $s0
		jal return
		
		
	# function drop (tower addr)
	# --------------------------------------------------
	# Drop the held piece on the given tower
	drop:
		# get args
		move $t0, $a0
		
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		drop_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, drop_loop_exit
			addi $t0, $t0, 4
			j drop_loop
		drop_loop_exit:
			lw $t1, HOLD
			sw $t1, 0($t0)
			sw $zero, HOLD
			
		# return
		move $a0, $s0
		jal return
		
	
	# function getTop (tower addr)
	# --------------------------------------------------
	# Returns the level of the piece on top of the given tower
	getTop:
		# get args
		move $t0, $a0
		
		# save stack, $s0 is return address
		move $a0, $ra
		jal save
		
		move $t2, $t0
		getTop_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, getTop_loop_exit
			move $t2, $t0
			addi $t0, $t0, 4
			j getTop_loop
		getTop_loop_exit:
			lw $v0, 0($t2)
		
		# return
		move $a0, $s0
		jal return
		
	
	# ENTRY POINT
	# --------------------------------------------------
	main:
		jal setup
		jal play # jumps to exit
