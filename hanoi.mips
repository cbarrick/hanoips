#
#  oooo                                         o8o
#  `888                                         `"'
#   888 .oo.    .oooo.   ooo. .oo.    .ooooo.  oooo  oo.ooooo.   .oooo.o
#   888P"Y88b  `P  )88b  `888P"Y88b  d88' `88b `888   888' `88b d88(  "8
#   888   888   .oP"888   888   888  888   888  888   888   888 `"Y88b.
#   888   888  d8(  888   888   888  888   888  888   888   888 o.  )88b
#  o888o o888o `Y888""8o o888o o888o `Y8bod8P' o888o  888bod8P' 8""888P'
#                                                     888
#                                                    o888o
#
# Hanoips is a Towers of Hanoi console game written in MIPS assembly by Chris Barrick
# https://github.com/cbarrick/hanoips


# CONTENTS
# --------
# Data
#   Constants
#   Globals
# Text
#   Function Call Utilities
#   Drawing
#   Gameplay Helpers
#   Initialization
#   Main Loop
#   Entry Point


.data

	# Constants
	# ==================================================

	CHAR_BLOCK: .asciiz "X"
	CHAR_EOL:   .asciiz "\n"
	CHAR_LINE:  .asciiz "-"
	CHAR_PAD:   .asciiz " "

	MAX_HEIGHT: .word 12

	PROMPT_HEIGHT:    .asciiz "How tall shall I make the tower (max 12): "
	PROMPT_MOVE_FROM: .asciiz "Move from tower #: "
	PROMPT_MOVE_TO:   .asciiz "Move to tower #: "
	PROMPT_TOO_TALL:  .asciiz "That's too tall"
	PROMPT_WIN:       .asciiz "Congratulations!"


	# Globals
	# ==================================================

	HOLD: .word 0 # The level of the piece being held, see `hold` and `drop`

	HEIGHT: .word 0 # The height of the tallest possible tower, i.e. the level of the biggest piece
	WIDTH:  .word 0 # The width of the widest piece, i.e. HEIGHT * 2 - 1

	# The array of pieces for each tower. Pieces are identified by their "level" or size.
	# Higher levels are bigger pieces; 0 means no piece. Each array must be null-terminated.
	TOWER1: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	TOWER2: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	TOWER3: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


.text
	j main


	# Function Call Utilities
	# ==================================================
	# Use `jal save` to initialize a function call and `j return` to return from one
	# The address passed to `save` is the one jumped to by `return`

	# function save (addr)
	# --------------------------------------------------
	# Push the $s registers and `addr` to the stack
	# Params:
	#   - addr: The address to which to jumped when you return
	save:
		addi $sp, $sp, -36
		sw $s0, 0($sp)
		sw $s1, 4($sp)
		sw $s2, 8($sp)
		sw $s3, 12($sp)
		sw $s4, 16($sp)
		sw $s5, 20($sp)
		sw $s6, 24($sp)
		sw $s7, 28($sp)
		sw $a0, 32($sp)
		jr $ra

	# function return ()
	# --------------------------------------------------
	# Restore the stack after a `save` and jump to the address passed to `save`
	# You should call this without linking, i.e. `j return`
	return:
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		lw $s5, 20($sp)
		lw $s6, 24($sp)
		lw $s7, 28($sp)
		lw $ra, 32($sp)
		addi $sp, $sp, 36
		jr $ra


	# Drawing
	# ==================================================

	# function drawStr (str, count):
	# --------------------------------------------------
	# Print a string some number of times
	# Params:
	#   - str: The address of the string to print
	#   - count: The number of times to print the string
	drawStr:
		beq $a1, 0, drawStr_ret
		move $t0, $a1
		li $v0, 4
		syscall
		addi $a1, $t0, -1
		j drawStr
		drawStr_ret:
		jr $ra

	# function eol ():
	# --------------------------------------------------
	# Print a line ending
	eol:
		la $a0, CHAR_EOL
		li $v0, 4
		syscall
		jr $ra

	# function drawPiece (level):
	# --------------------------------------------------
	# Print a hanoi piece
	# Params:
	#   - level: Which piece to draw. 1 is the smallest piece, 0 is no piece
	drawPiece:
		# get args
		move $t0, $a0

		# save stack
		move $a0, $ra
		jal save

		# $s0 is block width
		move $s0, $t0
		ble $s0, 0, drawPiece_blockWidth_0
		addi $s0, $s0, -1
		sll $s0, $s0, 1
		addi $s0, $s0, 1
		j drawPiece_blockWidth_done
		drawPiece_blockWidth_0:
		la $a0, CHAR_PAD
		li $a1, 1
		jal drawStr
		drawPiece_blockWidth_done:

		# s2 is padding width
		lw $s1, WIDTH
		addi $s1, $s1, 2
		sub $s1, $s1, $s0
		srl $s1, $s1, 1

		# draw
		la $a0, CHAR_PAD
		move $a1, $s1
		jal drawStr
		la $a0, CHAR_BLOCK
		move $a1, $s0
		jal drawStr
		la $a0, CHAR_PAD
		move $a1, $s1
		jal drawStr

		# return
		j return

	# function drawLabels ():
	# --------------------------------------------------
	# Print the tower labels
	drawLabels:
		# save stack
		move $a0, $ra
		jal save

		# $s0 is number of towers
		li $s0, 3

		# $s1 is border width
		lw $s1, WIDTH
		addi $s1, $s1, 2
		mult $s0, $s1
		mflo $s1

		# $s2 is padding width
		lw $s2, WIDTH
		addi $s2, $s2, 1
		srl $s2, $s2, 1

		# $s3 is loop counter
		li $s3, 1

		# print border line
		la $a0, CHAR_LINE
		move $a1, $s1
		jal drawStr
		jal eol

		# draw labels
		drawLabels_loop:
			bgt $s3, $s0, drawLabels_loop_exit
			la $a0, CHAR_PAD
			move $a1, $s2
			jal drawStr
			move $a0, $s3
			li $v0, 1
			syscall
			la $a0, CHAR_PAD
			move $a1, $s2
			jal drawStr
			addi $s3, $s3, 1
			j drawLabels_loop
		drawLabels_loop_exit:

		jal eol

		# return
		j return

	# function drawState ()
	# --------------------------------------------------
	# Print the towers with labels
	drawState:
		# save stack
		move $a0, $ra
		jal save

		# $s0 is height - 1
		lw $s0, HEIGHT
		addi $s0, $s0, -1

		drawState_loop:
			blt $s0, 0, drawState_loop_exit

			la $t0, TOWER1
			move $t1, $s0
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece

			la $t0, TOWER2
			move $t1, $s0
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece

			la $t0, TOWER3
			move $t1, $s0
			sll $t1, $t1, 2
			add $t0, $t0, $t1
			lw $a0, 0($t0)
			jal drawPiece

			jal eol
			addi $s0, $s0, -1
			j drawState_loop
		drawState_loop_exit:

		jal drawLabels

		# return
		j return


	# Gameplay Helpers
	# ==================================================

	# function hold (tower)
	# --------------------------------------------------
	# Take the top piece off the top of a tower and hold it
	# Params:
	#   - tower: The address of the tower
	hold:
		# get args
		move $t0, $a0

		# save stack
		move $a0, $ra
		jal save

		hold_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, hold_loop_exit
			move $t2, $t0
			addi $t0, $t0, 4
			j hold_loop
		hold_loop_exit:

		lw $t3, 0($t2)
		sw $t3, HOLD
		sw $zero, 0($t2)

		# return
		j return

	# function drop (tower)
	# --------------------------------------------------
	# Drop the held piece on the given tower
	# Params:
	#   - tower: The address of the tower
	drop:
		# get args
		move $t0, $a0

		# save stack
		move $a0, $ra
		jal save

		drop_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, drop_loop_exit
			addi $t0, $t0, 4
			j drop_loop
		drop_loop_exit:

		lw $t1, HOLD
		sw $t1, 0($t0)
		sw $zero, HOLD

		# return
		j return

	# function getTop (tower)
	# --------------------------------------------------
	# Return the level of the piece on top of the given tower
	# Params:
	#   - tower: The address of the tower
	getTop:
		# get args
		move $t0, $a0

		# save stack
		move $a0, $ra
		jal save

		move $t2, $t0

		getTop_loop:
			lw, $t1, 0($t0)
			beq $t1, 0, getTop_loop_exit
			move $t2, $t0
			addi $t0, $t0, 4
			j getTop_loop
		getTop_loop_exit:

		lw $v0, 0($t2)

		# return
		j return


	# Initialization
	# ==================================================

	# function setup ()
	# --------------------------------------------------
	# Prompt the user for settings and initializes the game
	setup:
		# save stack
		move $a0, $ra
		jal save

		# get input
		setup_prompt:
		la $a0, PROMPT_HEIGHT
		li $a1, 1
		jal drawStr
		li $v0, 5
		syscall
		move $s0, $v0 # $s0 is input
		jal eol

		# validate input
		lw $t0, MAX_HEIGHT
		blt $s0, 0, setup_invalid
		ble $s0, $t0, setup_valid
		setup_invalid:
		la $a0, PROMPT_TOO_TALL
		li $a1, 1
		jal drawStr
		jal eol
		j setup_prompt
		setup_valid:

		# setup game height
		sw $s0, HEIGHT

		# setup game width
		sll $s0, $s0, 1
		addi $s0, $s0, -1
		sw $s0, WIDTH

		# build tower
		lw $t0, HEIGHT # level value
		la $t1, TOWER1 # address to put level value
		setup_loop:
			ble $t0, 0, setup_loop_exit
			sw $t0, 0($t1)
			addi $t0, $t0, -1
			addi $t1, $t1, 4
			j setup_loop
		setup_loop_exit:

		# return
		j return


	# Main Loop
	# ==================================================

	# function play ()
	# --------------------------------------------------
	# Print the towers, get input from the user, make the move, wash, rinse, and repeat
	play:
		# save stack
		move $a0, $ra
		jal save

		play_loop:
			jal eol
			jal drawState

			# get "from" input, $s0 is "from" tower addr
			li $v0, 4
			la $a0, PROMPT_MOVE_FROM
			syscall
			li $v0, 5
			syscall
			la $s0, TOWER1
			beq $v0, 1, play_got_from
			la $s0, TOWER2
			beq $v0, 2, play_got_from
			la $s0, TOWER3
			play_got_from:

			# get "to" input, $s0 is "to" tower addr
			li $v0, 4
			la $a0, PROMPT_MOVE_TO
			syscall
			li $v0, 5
			syscall
			la $s1, TOWER1
			beq $v0, 1, play_got_to
			la $s1, TOWER2
			beq $v0, 2, play_got_to
			la $s1, TOWER3
			play_got_to:

			# validate input
			move $a0, $s0
			jal getTop
			move $s2, $v0 # $s2 is the level of the top piece of the "from" tower
			move $a0, $s1
			jal getTop
			move $s3, $v0 # $s3 is the level of the top piece of the "to" tower
			beq $s3, 0, play_valid
			blt $s2, $s3, play_valid
			j play_loop
			play_valid:

			# move
			move $a0, $s0
			jal hold
			move $a0, $s1
			jal drop

			# check win
			lw $s4, TOWER1
			lw $s5, TOWER2
			beq $s4, $s5, play_loop_exit # win!

			# loop
			j play_loop
		play_loop_exit:

		jal eol
		jal drawState
		la $a0, PROMPT_WIN
		li $a1, 1
		jal drawStr
		jal eol

		# return
		j return


	# Entry Point
	# ==================================================
	main:
		jal setup
		jal play

		# exit with status 0
		li $a0, 0
		li $v0, 17
		syscall
